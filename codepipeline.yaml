AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  VPC:
    Type: String
    Description: The VPC to create the cluster
    Default: vpc-5cc68c3b
  PrivateSubnet01:
    Type: String
    Description: The subnet for the DB cluster
    Default: subnet-c7133c8e 
  PrivateSubnet02:
    Type: String
    Description: The subnet for the DB cluster
    Default: subnet-01ddef66
  RepositoryName:
    Type: String
    Description: Name of the ECR repository
    Default : demoapp1
  CodeCommitRepository:
    Type: String
    Description: Name of the CodeCommit repository
    Default : e2e-boilerplate
  CodeBuildProjectName:
    Type: String
    Description: Name of the CodeBuild project you want 
    Default: projecttest1
  ECSStackName:
    Type: String
    Description: Name of the ECS stack
    Default: my-service-1
  ECSClusterName:
    Type: String
    Description: Name of the ECS cluster
    Default: new-cluster
  ImageDefintionFileName:
    Type: String
    Description: Name of the Imagedefiniton file
    Default: imagedefinitions.json
  BucketName:
    Type: String
    Description: Name of the S3 bucket
    Default: 's323062023'
  
  Port:
    Type: Number
    Description: Port for the application 
    Default : 3000
Resources:
  MyTargetGroup1:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: MyTargetGroup1
      Port: !Ref Port
      Protocol: HTTP
      VpcId: !Ref VPC
      TargetType: ip
      # Other properties of the target group

  MyTargetGroup2:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: MyTargetGroup2
      Port: 3010
      Protocol: HTTP
      VpcId: !Ref VPC
      TargetType: ip
      # Other properties of the target group

  MyLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: MyLoadBalancer
      Scheme: internet-facing
      Subnets:
        - !Ref PrivateSubnet01
        - !Ref PrivateSubnet02
      SecurityGroups:
        - sg-c60524be
      Type: application
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '60'
  MyListener1:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref MyLoadBalancer
      Port: !Ref Port
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref MyTargetGroup1
  MyListener2:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref MyLoadBalancer
      Port: 3010
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref MyTargetGroup2

  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Ref ECSClusterName

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    DependsOn:
    - MyCodeBuildProject
    - DemoECRRepository
    Properties:
      Family: !Ref ECSStackName
      NetworkMode: awsvpc
      # ExecutionRoleArn: arn:aws:iam::914221124747:role/service-role/codebuild-project-test-service-role
      ExecutionRoleArn: !GetAtt CodeBuildServiceRole.Arn
      Cpu: 256
      Memory: 512
      RequiresCompatibilities:
       - FARGATE
      ContainerDefinitions:
        - Name: !Ref RepositoryName
          Image: !Sub '${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${RepositoryName}:latest'
          PortMappings:
            - ContainerPort: !Ref Port

  Service:
    Type: AWS::ECS::Service
    DependsOn:
    - MyListener1
    - MyListener2
    - MyLoadBalancer
    - DemoECRRepository
    Properties:
      Cluster: !Ref ECSCluster
      ServiceName: !Ref ECSStackName
      TaskDefinition: !Ref TaskDefinition
      DesiredCount: 1
      SchedulingStrategy: REPLICA
      LaunchType: FARGATE
      DeploymentController:
        Type: ECS
      LoadBalancers:
        - TargetGroupArn: !Ref MyTargetGroup1
        # - TargetGroupArn: 'arn:aws:elasticloadbalancing:ap-southeast-2:914221124747:targetgroup/target-e2e-test/9f3177d32e03fce8'
          ContainerName: !Ref RepositoryName
          ContainerPort: !Ref Port
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets:
            - !Ref PrivateSubnet01
            - !Ref PrivateSubnet02
          SecurityGroups:
            - sg-c60524be
          AssignPublicIp: ENABLED
  CodePipeline:
    Type: AWS::CodePipeline::Pipeline
    DependsOn:
    - DemoECRRepository
    Properties:
      Name: !Sub '${RepositoryName}-pipeline'
      RoleArn: !GetAtt MyServiceRole.Arn
      #RoleArn: 'arn:aws:iam::914221124747:role/service-role/AWSCodePipelineServiceRole-ap-southeast-2-pipeline-training'
      Stages:
        - Name: Source
          Actions:
            - Name: SourceAction
              ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: CodeCommit
                Version: '1'
              Configuration:
                RepositoryName: !Ref CodeCommitRepository
                BranchName: main
              OutputArtifacts:
                - Name: SourceOutput
              
        - Name: Build
          Actions:
            - Name: BuildAction
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: '1'
              Configuration:
                # ProjectName: !Ref CodeBuildProjectName
                ProjectName: !Ref MyCodeBuildProject
              InputArtifacts:
                - Name: SourceOutput
              OutputArtifacts:
                - Name: BuildOutput
        - Name: Deploy
          Actions:
            - Name: DeployAction
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: ECS
                Version: '1'
              Configuration:
                ClusterName: !Ref ECSClusterName
                ServiceName: !Ref ECSStackName
                FileName: !Ref ImageDefintionFileName
              InputArtifacts:
                - Name: BuildOutput
      ArtifactStores :
      - ArtifactStore :
          Type: S3
          # Location : codepipeline-ap-southeast-2-829095007813
          Location : !Ref BucketName
        Region: !Ref 'AWS::Region'
  MyPipelinePolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - iam:PassRole
            Resource: "*"
            Condition:
              StringLike:
                iam:PassedToService:
                   - "ecs-tasks.amazonaws.com"
          - Effect: Allow
            Action:
              - ecs-tasks:*
              - ec2:*
              - elasticloadbalancing:*
              - sns:*
              - ecs:*
              - cloudformation:*
              - elasticbeanstalk:*
              - rds:*
              - sqs:*
              - opsworks:*
              - devicefarm:*
              - states:*
              - appconfig:*
              - ecs-tasks:*
              - ecr:*
              - codecommit:*
              - codebuild:*
              - codedeploy:*
              - s3:*
            Resource: "*"
          - Effect: Allow
            Action:
              - codecommit:GetRepository
              - codecommit:GitPull
              - codecommit:UploadArchive
              - codecommit:CancelUploadArchive
              - codecommit:GetBranch
              - codecommit:GetCommit
              - codecommit:GetUploadArchiveStatus
              - codecommit:UploadArchive
              - codecommit:GitPush
            Resource: !Sub "arn:aws:codecommit:${AWS::Region}:${AWS::AccountId}:${CodeCommitRepository}"
  
  MyCodeBuildPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect : Allow
            Action : 
              - ssm:GetParameters
            Resource: "*"
          - Effect: Allow
            Action:
              - iam:PassRole
            Resource: "*"
            Condition:
              StringLike:
                iam:PassedToService:
                   - "ecs-tasks.amazonaws.com"
                   - "ecs.amazonaws.com"
          - Effect: Allow
            Action:
              - ecs-tasks:*
              - ec2:*
              - elasticloadbalancing:*
              - sns:*
              - ecs:*
              - cloudformation:*
              - elasticbeanstalk:*
              - rds:*
              - sqs:*
              - opsworks:*
              - devicefarm:*
              - states:*
              - appconfig:*
              - ecs-tasks:*
              - ecr:*
              - codecommit:*
              - codebuild:*
              - codedeploy:*
              - s3:*
            Resource: "*"
          - Effect: Allow
            Action:
              - codecommit:GetRepository
              - codecommit:GitPull
              - codecommit:UploadArchive
              - codecommit:CancelUploadArchive
              - codecommit:GetBranch
              - codecommit:GetCommit
              - codecommit:GetUploadArchiveStatus
              - codecommit:UploadArchive
              - codecommit:GitPush
            Resource: !Sub "arn:aws:codecommit:${AWS::Region}:${AWS::AccountId}:${CodeCommitRepository}"
  MyServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: MyServiceRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: 
              - codepipeline.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - !Ref MyPipelinePolicy
  MyCodeBuildProject:
    Type: AWS::CodeBuild::Project
    DependsOn:
    - DemoECRRepository
    Properties:
      Name: !Ref CodeBuildProjectName
      ServiceRole: !GetAtt CodeBuildServiceRole.Arn
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        PrivilegedMode: true
        Image: aws/codebuild/amazonlinux2-x86_64-standard:5.0
        EnvironmentVariables:
          - Name: AWS_DEFAULT_REGION
            Type: PLAINTEXT
            Value: ap-southeast-2
          - Name: AWS_ACCOUNT_ID
            Type: PLAINTEXT
            Value: 914221124747
          - Name: AWS_IMAGE_DEMO_APP
            Type: PLAINTEXT
            Value: !Ref RepositoryName
          - Name: AWS_IMAGE_TEST
            Type: PLAINTEXT
            Value: test-e2e
          - Name: AWS_IMAGE_MSSQL
            Type: PLAINTEXT
            Value: mssql
          - Name: AWS_IMAGE_TAG
            Type: PLAINTEXT
            Value: latest
      Source:
        Type: CODEPIPELINE
        # Location: !Ref CodeCommitRepository
      TimeoutInMinutes: 60

  CodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: CodeBuildServiceRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: 
              - codebuild.amazonaws.com
              - ecs.amazonaws.com
              - ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSCodeBuildAdminAccess
        - arn:aws:iam::aws:policy/AmazonECS_FullAccess
        - arn:aws:iam::aws:policy/AWSCodeDeployRoleForECS
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
        - arn:aws:iam::aws:policy/service-role/AWSAppRunnerServicePolicyForECRAccess
        - !Ref MyCodeBuildPolicy

  DemoECRRepository:
    Type: AWS::ECR::Repository
    DeletionPolicy: Retain
    Properties:
      RepositoryName: !Ref RepositoryName

Outputs:
  AppUrl:
    Value: !Sub '${MyLoadBalancer.DNSName}:${Port}'


