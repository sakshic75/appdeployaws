AWSTemplateFormatVersion: "2010-09-09"
Description: Create a template for creating an AppSync API with dynamo db tables using cloud formation

Parameters:
  APIName:
    Type: String
    Description: "The API that perform CRUD for DynamoDB"

Resources:
  # DynamoDBProductsTable:
  #   Type: "AWS::DynamoDB::Table"
  #   Description: "Data store for AWS AppSync Notes Type"
  #   Properties:
  #     TableName: !Sub "${APIName}-notes-table"
  #     AttributeDefinitions:
  #       - AttributeName: "id"
  #         AttributeType: "S"
  #     KeySchema:
  #       - AttributeName: "id"
  #         KeyType: "HASH"
  #     ProvisionedThroughput:
  #       ReadCapacityUnits: 5
  #       WriteCapacityUnits: 5

  # DynamoDBRole:
  #   Type: AWS::IAM::Role

  #   Properties:
  #     RoleName: !Sub ${APIName}-appsync-dynamodb-role
  #     ManagedPolicyArns:
  #       - Ref: AppSyncDynamoDBPolicy
  #     AssumeRolePolicyDocument:
  #       Version: 2012-10-17
  #       Statement:
  #         - Effect: Allow
  #           Action:
  #             - sts:AssumeRole
  #           Principal:
  #             Service:
  #               - appsync.amazonaws.com
  #   DependsOn:
  #     - AppSyncDynamoDBPolicy

  # AppSyncDynamoDBPolicy:
  #   Type: AWS::IAM::ManagedPolicy

  #   Properties:
  #     Description: Managed policy to allow AWS AppSync to access the tables created by this template.

  #     Path: /appsync/

  #     PolicyDocument:
  #       Version: 2012-10-17

  #       Statement:
  #         - Effect: Allow

  #           Action:
  #             - dynamodb:GetItem

  #             - dynamodb:PutItem

  #             - dynamodb:DeleteItem

  #             - dynamodb:UpdateItem

  #             - dynamodb:Query

  #             - dynamodb:Scan

  #             - dynamodb:BatchGetItem

  #             - dynamodb:BatchWriteItem

  #           Resource: !Join ["", [!GetAtt DynamoDBProductsTable.Arn, "*"]]

  AppSyncApi:
    Type: "AWS::AppSync::GraphQLApi"

    Description: "The GraphQL API for the Notes App"

    Properties:
      AuthenticationType: "API_KEY"

      Name: !Sub ${APIName}

  AppSyncSchema:
    Type: "AWS::AppSync::GraphQLSchema"

    Properties:
      ApiId: !GetAtt AppSyncApi.ApiId

      Definition: |

        type Product {

          id: ID!

          name: String

          price: Float
          description : String
          createdAt: String }

        type Schema {

          query: Query

          mutation: Mutation}

  # AppSyncProductsTableDataSource:
  #   Type: "AWS::AppSync::DataSource"

  #   Properties:
  #     ApiId: !GetAtt AppSyncApi.ApiId
  #     Name: !Sub ${APIName}_notes_table

  #     Description: "The Product Table AppSync Data Source"

  #     Type: AMAZON_DYNAMODB

  #     ServiceRoleArn: !GetAtt DynamoDBRole.Arn

  #     DynamoDBConfig:
  #       TableName: !Ref DynamoDBProductsTable

  #       AwsRegion: !Sub ${AWS::Region}

  # AppSyncAllProductsQueryResolver:

  #   Type: "AWS::AppSync::Resolver"

  #   DependsOn: AppSyncSchema

  #   Properties:

  #     ApiId: !GetAtt AppSyncApi.ApiId

  #     TypeName: Query

  #     FieldName: allProducts

  #     DataSourceName: !GetAtt AppSyncProductsTableDataSource.Name

  #     RequestMappingTemplate: |

  #       {

  #         "version": "2017-02-28",

  #         "operation": "Query",

  #         "query": {

  #           "expression": "id = :id",

  #           "expressionValues": {

  #             ":id": $util.dynamodb.toDynamoDBJson($ctx.identity.sub)

  #           }

  #         }

  #       },

  #       "limit": $util.defaultIfNull(${ctx.args.limit}, 20),

  #       "nextToken": $util.toJson(${ctx.args.nextToken})

  #     ResponseMappingTemplate: |

  #       {

  #         "notes": $util.toJson($ctx.result.items),

  #         "nextToken": $util.toJson(${ctx.args.nextToken})

  #       }

  # AppSyncGetProductQueryResolver:
  #   Type: "AWS::AppSync::Resolver"

  #   DependsOn: AppSyncSchema

  #   Properties:
  #     ApiId: !GetAtt AppSyncApi.ApiId

  #     TypeName: Query

  #     FieldName: getProduct

  #     DataSourceName: !GetAtt AppSyncProductsTableDataSource.Name

  #     RequestMappingTemplate: |

  #       {

  #         "version": "2012-02-28",

  #         "operation": "GetItem",

  #         "key": {

  #           "NoteId": $util.dynamodb.toDynamoDBJson($ctx.args.id),

  #           "UserId": $util.dynamodb.toDynamoDBJson($ctx.identity.sub)

  #         }

  #       }

  #     ResponseMappingTemplate: "$util.toJson($ctx.result)"

  # AppSyncSaveNoteMutationResolver:
  #   Type: "AWS::AppSync::Resolver"

  #   DependsOn: AppSyncSchema

  #   Properties:
  #     ApiId: !GetAtt AppSyncApi.ApiId

  #     TypeName: Mutation

  #     FieldName: saveProduct

  #     DataSourceName: !GetAtt AppSyncProductsTableDataSource.Name

  #     RequestMappingTemplate: |

  #       {

  #         "version": "2012-02-28",

  #         "operation": "PutItem",

  #         "key": {

  #           "id": $util.dynamodb.toDynamoDBJson($ctx.args.id)

  #         },

  #         "attributeValues": {

  #           "name": $util.dynamodb.toDynamoDBJson($ctx.args.name),

  #           "price": $util.dynamodb.toDynamoDBJson($ctx.args.price),
  #           "description": $util.dynamodb.toDynamoDBJson($ctx.args.description),
  #           "createdAt": $util.dynamodb.toDynamoDBJson($ctx.args.createdAt)

  #         }

  #       }

  #     ResponseMappingTemplate: "$util.toJson($ctx.result)"

  # AppSyncDeleteProductMutationResolver:
  #   Type: "AWS::AppSync::Resolver"

  #   DependsOn: AppSyncSchema

  #   Properties:
  #     ApiId: !GetAtt AppSyncApi.ApiId

  #     TypeName: Mutation

  #     FieldName: deleteProduct

  #     DataSourceName: !GetAtt AppSyncProductsTableDataSource.Name

  #     RequestMappingTemplate: |

  #       {

  #         "version": "2012-02-28",

  #         "operation": "DeleteItem",

  #         "key": {

  #           "id": $util.dynamodb.toDynamoDBJson($ctx.args.id),

  #           "id": $util.dynamodb.toDynamoDBJson($ctx.identity.sub)

  #         }

  #       }

  #     ResponseMappingTemplate: "$util.toJson($ctx.result)"

Outputs:
  # DynamoDBProductsTableName:
  #   Description: The name of the DynamoDB Table

  #   Value: !Ref DynamoDBProductsTable

  GraphQLApiEndpoint:
    Description: The URL to the GraphQL Endpoint

    Value: !GetAtt AppSyncApi.GraphQLUrl

  GraphQLApiId:
    Description: The API ID of the GraphQL API

    Value: !GetAtt AppSyncApi.ApiId
